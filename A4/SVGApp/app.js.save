'use strict'

// C library API
const ffi = require('ffi-napi');

// Express App (Routes)
const express = require("express");
const app     = express();
const path    = require("path");
const fileUpload = require('express-fileupload');

app.use(fileUpload());
app.use(express.static(path.join(__dirname+'/uploads')));

// Minimization
const fs = require('fs');
const JavaScriptObfuscator = require('javascript-obfuscator');

// Important, pass in port as in `npm run dev 1234`, do not change
const portNum = process.argv[2];

// Send HTML at root, do not change
app.get('/',function(req,res){
  res.sendFile(path.join(__dirname+'/public/index.html'));
});

// Send Style, do not change
app.get('/style.css',function(req,res){
  //Feel free to change the contents of style.css to prettify your Web app
  res.sendFile(path.join(__dirname+'/public/style.css'));
});

// Send obfuscated JS, do not change
app.get('/index.js',function(req,res){
  fs.readFile(path.join(__dirname+'/public/index.js'), 'utf8', function(err, contents) {
    const minimizedContents = JavaScriptObfuscator.obfuscate(contents, {compact: true, controlFlowFlattening: true});
    res.contentType('application/javascript');
    res.send(minimizedContents._obfuscatedCode);
  });
});

//Respond to POST requests that upload files to uploads/ directory
app.post('/upload', function(req, res) {
  if(!req.files) {
    return res.status(400).send('No files were uploaded.');
  }

  let uploadFile = req.files.uploadFile;

  // Use the mv() method to place the file somewhere on your server
  uploadFile.mv('uploads/' + uploadFile.name, function(err) {
    if(err) {
      return res.status(500).send(err);
    }

    res.redirect('/');
  });
});

//Respond to GET requests for files in the uploads/ directory
app.get('/uploads/:name', function(req , res){
  fs.stat('uploads/' + req.params.name, function(err, stat) {
    if(err == null) {
      res.sendFile(path.join(__dirname+'/uploads/' + req.params.name));
    } else {
      console.log('Error in file downloading route: '+err);
      res.send('');
    }
  });
});

//******************** Your code goes here ********************



app.listen(portNum);
console.log('Running app at localhost: ' + portNum);

let sharedLib = ffi.Library('./libsvgparse', {

	'createValidSVGimage': ['pointer', ['string', 'string']],
  'SVGtoJSON': ['string', ['pointer']],
  'test': [ 'string', ['string']],
  'requestCreateSVG': [ 'string', ['string', 'string', 'string']],
  'addRectangle': ['void', ['string','string','float','float','float','float','string']],
  'scaleShape': [ 'void', ['string', 'string', 'string']],
  'getTitle': [ 'string', ['string']],
  'getDescription': [ 'string', ['string']],
  'editAttribute': [ 'void', ['string', 'string', 'string']],
});




app.get('/svg', function(req, res){

	var r = [];
  var dir;
	let files = fs.readdirSync('./uploads');

	for(var i = 0; i < files.length; i++)
	{
    dir = "./uploads/" +files[i];
    var syn = fs.statSync(dir);
    var sizeB = syn["size"];
    let sizeK = sizeB /1024;
    var whole = Math.round(sizeK);
    var fileSize = whole.toString(8) + "KB";


    var svg = sharedLib.createValidSVGimage("./uploads/" + files[i] ,  "svg.xsd");
    var json = sharedLib.SVGtoJSON(svg);

		let jsonObj = JSON.parse(json);
		jsonObj["filename"] = files[i];
    jsonObj["fileSize"] = fileSize;

		r[i] = JSON.stringify(jsonObj);
	}

    console.log("In SVG Log func");
	res.send(r);
});



/* View Panel */
app.get('/panel/:filename', function(req , res){
  let file = req.params.filename;
  console.log("fileNAME is: " + file);

    var jsonObj = sharedLib.test(file);
    var title = sharedLib.getTitle(file);
    var description = sharedLib.getDescription(file);
    console.log("\n\nJSON Objects: \n" + jsonObj + "\n\nTitle: \n"+title+ "\n\nDescription: \n" +description);

    // let p = JSON.parse(jsonObj);
    // console.log(p);

    let viewPanel = {
      title: title,
      description: description,
      json : jsonObj
    }

    //console.log(jsonObj);
    //
    // let jsonData = {
    //   var allListsOfAttrJSON = p;
    // }
   res.send(viewPanel);
});


/* Create SVG Image */
app.get('/createSVG', function(req , res){
  let file = req.query.file;
  let title = req.query.title;
  let description = req.query.description;

  console.log("\n\n File Name received is: " + file + "\n\n");
  console.log("\n\n Title = " + title + " and description = " + description);

    var jsonObj = sharedLib.requestCreateSVG(file, title, description);
    console.log("\n\n" + jsonObj + "\n\n");


   res.send(jsonObj);
});

/* Add Shape */
app.get('/addShape', function(req , res){
  let file = req.query.filename;
  console.log("\n\n File Name received is: " + file + "\n\n");

  console.log("shapeType: "+req.query.shapeType);
  console.log("x: "+req.query.x);
  console.log("y: "+req.query.y);
  console.log("rw: "+req.query.rw);
  console.log("h: "+req.query.h);
  console.log("units: "+req.query.units);

  let addShapeExecute = sharedLib.addRectangle(req.query.filename, req.query.shapeType, parseFloat(req.query.x), parseFloat(req.query.y), parseFloat(req.query.rw), parseFloat(req.query.h), req.query.units );

  res.send("Successfully Added");
});


/* Scale Shapes */
app.get('/scaleShape', function(req , res){
  console.log("Scale Shape Data Received:");
  console.log("\n\n File Name : " + req.query.filename);
  console.log("shapeType: "+req.query.shapeType);
  console.log("scale Factor: "+req.query.scaleFactor);

  let scaleExecute = sharedLib.scaleShape(req.query.filename, req.query.shapeType, String(req.query.scaleFactor));

  res.send("Successfully Added");
});

/* Scale Shapes */
app.get('/editAttribute', function(req , res){
  console.log("Edit Attribute Data Received:");
  console.log("\n\n title : " + req.query.title);
  console.log("description: "+req.query.description);
  console.log("filename: "+req.query.file);


  let editAttributeExecute = sharedLib.editAttribute(req.query.file, req.query.title, req.query.description);

  res.send("Successfully Added");
});



/************************************************* Assignment 4 ********************************************************/

'use strict'

let dbConf = {
	host     : 'dursley.socs.uoguelph.ca',
	user     : 'msaeed06',
	password : '1077675',
	database : 'msaeed06'
};

let insRec = "INSERT INTO student (last_name, first_name, mark) VALUES ('Hugo','Victor','B+'),('Rudin','Walter','A-'),('Stevens','Richard','C')";

async function main() {
    // get the client
    const mysql = require('mysql2/promise');

    let connection;

    try{
        // create the connection
        connection = await mysql.createConnection(dbConf)
        //Populate the table
        await connection.execute(insRec);

        //Run select query, wait for results
        const [rows1, fields1] = await connection.execute('SELECT * from `student` ORDER BY `last_name`');

        console.log("\nSorted by last name:");
        for (let row of rows1){
            console.log("ID: "+row.id+" Last name: "+row.last_name+" First name: "+row.first_name+" mark: "+row.mark );
        }

        //Run select query, wait for results
        console.log("\nSorted by first name:");
        const [rows2, fields2] = await connection.execute('SELECT * from `student` ORDER BY `first_name`');
        for (let row of rows2){
            console.log("ID: "+row.id+" Last name: "+row.last_name+" First name: "+row.first_name+" mark: "+row.mark );
        }

        //await connection.execute("DELETE FROM student");
    }catch(e){
        console.log("Query error: "+e);
    }finally {
        if (connection && connection.end) connection.end();
    }

  }

main();
dsfdfsd 
